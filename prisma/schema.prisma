generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  email         String         @unique
  name          String
  activities    Activity[]
  events        Event[]
  calendarItems CalendarItem[]
  settings      UserSettings?
  teams         TeamMember[]
  tasks         Task[]
  goals         Goal[]
  fitnessData   FitnessData?
  workouts      Workout[]
  mealPlans     MealPlan[]
}

model Team {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String
  description String?     @db.Text
  members     TeamMember[]
  tasks       Task[]
  goals       TeamGoal[]
}

model TeamMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String   // e.g., "admin", "member", "viewer"
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String

  @@unique([userId, teamId])
}

model Task {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  description String?   @db.Text
  status      Status    
  priority    Priority 
  dueDate     DateTime?
  completedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  team        Team?     @relation(fields: [teamId], references: [id])
  teamId      String?
  tags        Tag[]
  subtasks    Subtask[]
}

enum Priority {
  low
  medium
  high
}

enum Status {
  todo
  inProgress
  completed
}

model Subtask {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  completed   Boolean   @default(false)
  task        Task      @relation(fields: [taskId], references: [id])
  taskId      String
}

model Goal {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  title        String
  description  String?        @db.Text
  category     Category       @default(personal)
  deadline     DateTime?
  status       GoalStatus         @default(notStarted)
  progress     Float          @default(0)  
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  milestones   Milestone[]
  measurements GoalMeasure[]
}

enum Category {
  personal
  professional
  fitness
}

enum GoalStatus {
  notStarted
  inProgress
  achieved
}
model TeamGoal {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  description String?   @db.Text
  deadline    DateTime?
  status      String
  progress    Float     @default(0)
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  milestones  Milestone[]
}

model Milestone {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  description String?   @db.Text
  dueDate     DateTime?
  completed   Boolean   @default(false)
  goal        Goal?     @relation(fields: [goalId], references: [id])
  goalId      String?
  teamGoal    TeamGoal? @relation(fields: [teamGoalId], references: [id])
  teamGoalId  String?
}

model GoalMeasure {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      DateTime
  value     Float
  unit      String
  notes     String?  @db.Text
  goal      Goal     @relation(fields: [goalId], references: [id])
  goalId    String
}

model FitnessData {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  height       Float?   // in cm
  weight       Float?   // in kg
  targetWeight Float?   // in kg
  bmi          Float?
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  measurements BodyMeasurement[]
}

model BodyMeasurement {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  date          DateTime
  weight        Float?      // in kg
  bodyFat       Float?      // percentage
  muscleMass    Float?      // in kg
  waterWeight   Float?      // in kg
  chest         Float?      // in cm
  waist         Float?      // in cm
  hips          Float?      // in cm
  notes         String?     @db.Text
  fitnessData   FitnessData @relation(fields: [fitnessDataId], references: [id])
  fitnessDataId String
}

model Workout {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  date        DateTime
  type        ExerciseType     // e.g., "strength", "cardio", "flexibility"
  duration    Int        // in minutes
  caloriesBurned Int?
  notes       String?    @db.Text
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  exercises   Exercise[]
}

enum ExerciseType {
  strength
  cardio
  flexibility
}
model Exercise {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  sets        Int?
  reps        Int?
  weight      Float?   // in kg
  duration    Int?     // in minutes
  distance    Float?   // in km
  notes       String?  @db.Text
  workout     Workout  @relation(fields: [workoutId], references: [id])
  workoutId   String
}

model MealPlan {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  date        DateTime
  type        FoodType   // e.g., "breakfast", "lunch", "dinner", "snack"
  calories    Int?
  protein     Float?   // in grams
  carbs       Float?   // in grams
  fats        Float?   // in grams
  notes       String?  @db.Text
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  foods       Food[]
}

enum FoodType {
  breakfast
  lunch
  dinner
  snack
}

model Food {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  portion     Float     // in grams
  calories    Int
  protein     Float?    // in grams
  carbs       Float?    // in grams
  fats        Float?    // in grams
  mealPlan    MealPlan  @relation(fields: [mealPlanId], references: [id])
  mealPlanId  String
}

// Existing models remain the same
model Activity {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  day         String    
  time        String    
  duration    Int       
  description String?   @db.Text
  isRecurring Boolean   @default(false)
  notes       String?   @db.Text
  status      String?   
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  tags        Tag[]
}

model Event {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  date        DateTime
  title       String
  description String?     @db.Text
  user        User        @relation(fields: [userId], references: [id])
  userId      String
}

model CalendarItem {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  date        DateTime
  time        String   
  name        String
  duration    Int      
  notes       String?  @db.Text
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  tags        Tag[]
}

model Tag {
  id            String         @id @default(cuid())
  name          String
  activities    Activity[]
  calendarItems CalendarItem[]
  tasks         Task[]

  @@unique([name])
}

model UserSettings {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDarkMode  Boolean  @default(false)
  language    String   @default("en")
  timezone    String   @default("UTC")
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
}

model DayDescription {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  date        DateTime
  description String   @db.Text
}